import {
  DisplaySymbol,
  IconSymbol,
  LocaleAdapterSymbol,
  RtlSymbol,
  ThemeSymbol,
  createDisplay,
  createIcons,
  createLocale,
  createTheme,
  provideRtl,
  useDisplay,
  useLayout,
  useLocale,
  useRtl,
  useTheme
} from "./chunk-2HKRKQRM.js";
import {
  DefaultsSymbol,
  createDefaults,
  defineComponent,
  getUid,
  mergeDeep
} from "./chunk-YHNXF27F.js";
import "./chunk-QN2JUVHN.js";
import {
  reactive
} from "./chunk-Z7TFIBUG.js";
import "./chunk-DSTXS4JB.js";

// node_modules/vuetify/lib/framework.mjs
function createVuetify() {
  let vuetify = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const {
    blueprint,
    ...rest
  } = vuetify;
  const options = mergeDeep(blueprint, rest);
  const {
    aliases = {},
    components = {},
    directives = {}
  } = options;
  const defaults = createDefaults(options.defaults);
  const display = createDisplay(options.display, options.ssr);
  const theme = createTheme(options.theme);
  const icons = createIcons(options.icons);
  const locale = createLocale(options.locale);
  const install = (app) => {
    for (const key in directives) {
      app.directive(key, directives[key]);
    }
    for (const key in components) {
      app.component(key, components[key]);
    }
    for (const key in aliases) {
      app.component(key, defineComponent({
        ...aliases[key],
        name: key,
        aliasName: aliases[key].name
      }));
    }
    theme.install(app);
    locale.install(app);
    app.provide(DefaultsSymbol, defaults);
    app.provide(DisplaySymbol, display);
    app.provide(ThemeSymbol, theme);
    app.provide(IconSymbol, icons);
    app.provide(LocaleAdapterSymbol, locale.adapter);
    getUid.reset();
    app.mixin({
      computed: {
        $vuetify() {
          return reactive({
            defaults: inject.call(this, DefaultsSymbol),
            display: inject.call(this, DisplaySymbol),
            theme: inject.call(this, ThemeSymbol),
            icons: inject.call(this, IconSymbol),
            locale: inject.call(this, LocaleAdapterSymbol),
            rtl: inject.call(this, RtlSymbol)
          });
        }
      }
    });
  };
  return {
    install,
    defaults,
    display,
    theme,
    icons,
    locale: locale.adapter
  };
}
var version = "3.0.0-beta.13";
createVuetify.version = version;
function inject(key) {
  var _a;
  var _vm$parent, _vm$vnode$appContext;
  const vm = this.$;
  const provides = (_a = (_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) != null ? _a : (_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides;
  if (provides && key in provides) {
    return provides[key];
  }
}
export {
  createVuetify,
  provideRtl,
  useDisplay,
  useLayout,
  useLocale,
  useRtl,
  useTheme,
  version
};
//# sourceMappingURL=vuetify.js.map
